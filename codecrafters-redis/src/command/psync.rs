use serde_redis::{num_to_bytes, Array, SimpleString, Value};

const EMPTY_RDB_FILE: [u8; 88] = [
    0x52, 0x45, 0x44, 0x49, 0x53, 0x30, 0x30, 0x31, 0x31, 0xfa, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73,
    0x2d, 0x76, 0x65, 0x72, 0x05, 0x37, 0x2e, 0x32, 0x2e, 0x30, 0xfa, 0x0a, 0x72, 0x65, 0x64, 0x69,
    0x73, 0x2d, 0x62, 0x69, 0x74, 0x73, 0xc0, 0x40, 0xfa, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0xc2,
    0x6d, 0x08, 0xbc, 0x65, 0xfa, 0x08, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x6d, 0x65, 0x6d, 0xc2, 0xb0,
    0xc4, 0x10, 0x00, 0xfa, 0x08, 0x61, 0x6f, 0x66, 0x2d, 0x62, 0x61, 0x73, 0x65, 0xc0, 0x00, 0xff,
    0xf0, 0x6e, 0x3b, 0xfe, 0xc0, 0xff, 0x5a, 0xa2,
];

use crate::{
    conn::Conn,
    error::{ServerError, ServerResult},
    storage::Storage,
};

pub(super) async fn handle_psync_command(
    conn: &mut Conn<'_>,
    mut args: Array,
    storage: &mut Storage,
) -> ServerResult<()> {
    conn.log("run command PSYNC");
    let master_id = args
        .pop_front_bulk_string()
        .ok_or_else(|| ServerError::InvalidArgs {
            cmd: "PSYNC",
            args: args.clone(),
        })?;

    let offset = args
        .pop_front_bulk_string()
        .ok_or_else(|| ServerError::InvalidArgs {
            cmd: "PSYNC",
            args: args.clone(),
        })?;

    conn.log(format!("PSYNC {master_id} {offset}"));

    let value = Value::SimpleString(SimpleString::new(format!(
        "FULLRESYNC {} 0",
        storage.replica_master_id()
    )));

    conn.write_value(value).await?;

    let mut buf = vec![];
    buf.push(b'$');
    buf.extend(num_to_bytes(EMPTY_RDB_FILE.len() as i64));
    buf.extend(b"\r\n");
    buf.extend(EMPTY_RDB_FILE);

    conn.write_bytes(buf.as_slice()).await
}
